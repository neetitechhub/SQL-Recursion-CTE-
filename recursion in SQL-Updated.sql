--RECURSION IS DEFINED AS A PROCESS WHICH CALLS ITSELF DIRECTLY OR INDIRECTLY (RECURSION MEANS THAT REFERENCES ITSELF. ) AND THE CORRESPONDING FUNCTION IS CALLED A RECURSIVE FUNCTION.

--RECURSION IN SQL IS TYPICALLY IMPLEMENTED USING COMMON TABLE EXPRESSIONS (CTES) SOMETIME WE ALSO USE SELFJOIN FOR RECURSION.

--THIS FEATURE IS USEFUL FOR HIERARCHICAL DATA, SUCH AS ORGANIZATIONAL STRUCTURES OR TREE STRUCTURES, WHERE YOU NEED TO TRAVERSE AND MANIPULATE DATA WITH PARENT-CHILD RELATIONSHIPS.


/**
CREATE DATABASE CTEPRACTICE
USE CTEPRACTICE
--1. RETRIEVE A LIST OF EMPLOYEES ALONG WITH THEIR HIERARCHY LEVEL, STARTING FROM THE TOP-LEVEL MANAGER
CREATE TABLE EMPLOYEE (EMPLOYEEID INT	,NAME	VARCHAR(50),MANAGERID INT)
INSERT INTO  EMPLOYEE (EMPLOYEEID	,NAME,MANAGERID) VALUES
(1			,'ALICE',NULL),
(2			,'BOB',1	),
(3			,'CHARLIE',1),
(4			,'DAVE',2	),
(5			,'EVE',2	),
(6			,'FRANK',3	)

--2. CATEGORIES TABLE - CATEGORYID, CATEGORYNAME, CATEGORYPARENTID
CREATE TABLE CATEGORIES (CATEGORYID INT	,CATEGORYNAME	VARCHAR(50),PARENTCATEGORYID INT)
INSERT INTO CATEGORIES (CATEGORYID	,CATEGORYNAME	,PARENTCATEGORYID) VALUES
(1			,'ELECTRONICS'	,	NULL),
(2			,'COMPUTERS	'	,1		),
(3			,'LAPTOPS	'   , 	2	),
(4			,'DESKTOPS	'	,2		),
(5			,'TABLETS	'   , 	1	)

--3. FLATTENING A PRODUCT BILL OF MATERIALS (BOM)
CREATE TABLE MATERIALS (PARTID INT	,PARTNAME	VARCHAR(50),PARENTPARTID INT)
INSERT INTO MATERIALS (PARTID,	PARTNAME,	PARENTPARTID) VALUES
(1		,'CAR'	,    NULL),
(2		,'ENGINE'	,1	 ),
(3		,'WHEEL'	,1	 ),
(4		,'PISTON'	,2	 ),
(5		,'BOLT'	,4	  )

--4. FIND ALL LEVELS OF FAMILY ANCESTORS USING RECURSION IN SQL
CREATE TABLE FAMILIY (PERSONID INT	,NAME	VARCHAR(50),PARENTID INT)
INSERT INTO FAMILIY (PERSONID,	NAME,	PARENTID) VALUES
(1,			'JOHN',NULL),
(2,			'MICHAEL',1 ),
(3,			'SARAH',1 ),
(4,			'JAMES',2),
(5,			'EMMA',2	 ),
(6,			'DANIEL',3	 ),
(7,			'SOPHIA',4	 )

--OUTPUT :
PERSONID	NAME	PARENTID	LEVEL	ANCESTORS
1			JOHN	NULL				1
2			MICHAEL	1			1		1 -> 2
3			SARAH	1			1		1 -> 3
4			JAMES	2			2		1 -> 2 -> 4
5			EMMA	2			2		1 -> 2 -> 5
6			DANIEL	3			2		1 -> 3 -> 6
7			SOPHIA	4			3		1 -> 2 -> 4 -> 7

**/

--1. RETRIEVE A LIST OF EMPLOYEES ALONG WITH THEIR HIERARCHY LEVEL, STARTING FROM THE TOP-LEVEL MANAGER 

--EX.
WITH EmployeeHierarchy  AS (
    -- ANCHOR MEMBER: SELECT THE TOP-LEVEL MANAGER
    SELECT
        EMPLOYEEID,
        NAME,
        MANAGERID,
        1 AS LEVEL
    FROM EMPLOYEE
    WHERE MANAGERID IS NULL
    
    UNION ALL
    
    -- RECURSIVE MEMBER: SELECT EMPLOYEES REPORTING TO THE CURRENT LEVEL EMPLOYEES
    SELECT
        E.EMPLOYEEID,
        E.NAME,
        E.MANAGERID,
        EH.LEVEL + 1 AS LEVEL
    FROM EMPLOYEE E
    INNER JOIN EmployeeHierarchy  EH
    ON E.MANAGERID = EH.EMPLOYEEID
)
SELECT * FROM EmployeeHierarchy ;

--2. PARENT-CHILD RELATIONSHIP IN CATEGORIES (CATEGORIES TABLE - CATEGORYID, CATEGORYNAME, CATEGORYPARENTID)

WITH CATEGORIESHierarchy AS (
    SELECT CATEGORYID, CATEGORYNAME, PARENTCATEGORYID, 1 AS LEVEL
    FROM CATEGORIES
    WHERE PARENTCATEGORYID IS NULL
    
    UNION ALL
    
    SELECT C.CATEGORYID, C.CATEGORYNAME, C.PARENTCATEGORYID, CH.LEVEL + 1 AS LEVEL
    FROM CATEGORIES C
    INNER JOIN CATEGORIESHierarchy CH ON C.PARENTCATEGORYID = CH.CATEGORYID
)
SELECT * FROM CATEGORIESHierarchy;


--3.FLATTENING A PRODUCT BILL OF MATERIALS (BOM)

WITH MATERIALSHierarchy AS (
    SELECT PARTID, PARTNAME, PARENTPARTID, 1 AS LEVEL
    FROM MATERIALS
    WHERE PARENTPARTID IS NULL
    
    UNION ALL
    
    SELECT B.PARTID, B.PARTNAME, B.PARENTPARTID, BH.LEVEL + 1 AS LEVEL
    FROM MATERIALS B
    INNER JOIN MATERIALSHierarchy BH ON B.PARENTPARTID = BH.PARTID
)
SELECT * FROM MATERIALSHierarchy;

--4. FIND ALL LEVELS OF FAMILY ANCESTORS USING RECURSION IN SQL 

WITH FAMILIYHierarchy AS (
    -- ANCHOR MEMBER: SELECT THE TOP-LEVEL ANCESTORS (PEOPLE WITH NO PARENTS)
    SELECT
        PERSONID,
        NAME,
        PARENTID,
        0 AS LEVEL, -- LEVEL 0 INDICATES THE INDIVIDUAL THEMSELVES
        CAST(PERSONID AS VARCHAR(255)) AS ANCESTORS
    FROM FAMILIY
    WHERE PARENTID IS NULL

    UNION ALL

    -- RECURSIVE MEMBER: SELECT PEOPLE AND THEIR ANCESTORS
    SELECT
        F.PERSONID,
        F.NAME,
        F.PARENTID,
        AH.LEVEL + 1 AS LEVEL,
        CAST((CAST(AH.ANCESTORS AS VARCHAR(255)) + ' -> ' + CAST(F.PERSONID AS VARCHAR(255))) AS VARCHAR(255)) AS ANCESTORS
    FROM FAMILIY F
    INNER JOIN FAMILIYHierarchy AH ON F.PARENTID = AH.PERSONID
)
SELECT * FROM FAMILIYHierarchy;


